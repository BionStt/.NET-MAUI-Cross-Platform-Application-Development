<Application xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:windows="clr-namespace:Microsoft.Maui.Controls.PlatformConfiguration.WindowsSpecific;assembly=Microsoft.Maui.Controls"
             xmlns:local="clr-namespace:PassXYZ.Vault.Views"
             x:Class="PassXYZ.Vault.App"
             windows:Application.ImageDirectory="Assets">
    <Application.Resources>
        <ResourceDictionary Source="Resources/Styles/DarkTheme.xaml"/>

        <Style TargetType="NavigationPage">
            <Setter Property="BarBackgroundColor" Value="{DynamicResource NavigationBarColor}" />
            <Setter Property="BarTextColor" Value="{DynamicResource SecondaryColor}" />
        </Style>

        <Style TargetType="Label">
            <Setter Property="TextColor" Value="{DynamicResource PrimaryColor}" />
            <Setter Property="FontFamily" Value="OpenSansRegular" />
        </Style>

        <Style TargetType="Button">
            <Setter Property="TextColor" Value="{DynamicResource SecondaryColor}" />
            <Setter Property="FontFamily" Value="OpenSansRegular" />
            <Setter Property="BackgroundColor" Value="{DynamicResource NavigationBarColor}" />
            <Setter Property="Padding" Value="14,10" />
            <Setter Property="VisualStateManager.VisualStateGroups">
                <VisualStateGroupList>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{StaticResource PrimaryColor}" />
                            </VisualState.Setters>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{StaticResource Neutral}" />
                            </VisualState.Setters>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateGroupList>
            </Setter>
        </Style>
        
        <Style x:Key="BaseStyle" TargetType="Element">
            <Setter Property="Shell.FlyoutBackground" Value="{DynamicResource PrimaryColor}"/>
            <Setter Property="Shell.BackgroundColor" Value="{DynamicResource NavigationBarColor}" />
            <Setter Property="Shell.ForegroundColor" Value="{AppThemeBinding Light={StaticResource PrimaryColor}, Dark={StaticResource AccentColor}}" />
            <Setter Property="Shell.TitleColor" Value="{AppThemeBinding Light={StaticResource PrimaryColor}, Dark={StaticResource AccentColor}}" />
            <Setter Property="Shell.DisabledColor" Value="#B4000000" />
            <Setter Property="Shell.UnselectedColor" Value="#CC0000" />
            <Setter Property="Shell.NavBarHasShadow" Value="False"/>
        </Style>

        <Style BasedOn="{StaticResource BaseStyle}" TargetType="TabBar" />
        
        <Style BasedOn="{StaticResource BaseStyle}" ApplyToDerivedTypes="True" TargetType="FlyoutItem" />

        <!--
            Default Styles for all Flyout Items
            https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
        -->
        <Style Class="FlyoutItemLabelStyle" TargetType="Label">
            <Setter Property="TextColor" Value="White"></Setter>
        </Style>
        <Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
            <Setter Property="VisualStateManager.VisualStateGroups">
                <VisualStateGroupList>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{DynamicResource PageBackgroundColor}" />
                                <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{DynamicResource PrimaryTextColor}" />
                            </VisualState.Setters>
                        </VisualState>
                        <VisualState x:Name="Selected">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{DynamicResource AccentColor}" />
                            </VisualState.Setters>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateGroupList>
            </Setter>
        </Style>
        
        <!--
            Custom Style you can apply to any Flyout Item
        -->
        <Style Class="MenuItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
            <Setter Property="VisualStateManager.VisualStateGroups">
                <VisualStateGroupList>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal">
                            <VisualState.Setters>
                                <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{DynamicResource PrimaryTextColor}" />
                            </VisualState.Setters>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateGroupList>
            </Setter>
        </Style>

    </Application.Resources>

    <Application.MainPage>
        <Shell 
            Title="PassXYZ.Vault">

            <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->
            <FlyoutItem Title="About" Icon="tab_favorites.png">
                <ShellContent Route="AboutPage" ContentTemplate="{DataTemplate local:AboutPage}" />
            </FlyoutItem>
            <FlyoutItem Title="Browse" Icon="tab_home.png">
                <ShellContent Route="ItemsPage" ContentTemplate="{DataTemplate local:ItemsPage}" />
            </FlyoutItem>
            <FlyoutItem Title="Logout" Icon="tab_settings.png">
                <ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}" />
            </FlyoutItem>

            <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
            <!--MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked">
            </MenuItem-->

            <!-- TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where 
        you don't want users to be able to navigate away from. If you would like to navigate to this 
        content you can do so by calling 
        await Shell.Current.GoToAsync("//LoginPage");
    -->
            <TabBar>
                <ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}" />
            </TabBar>

            <!-- Optional Templates 
            // These may be provided inline as below or as separate classes.
            <Shell.ItemTemplate>
                <DataTemplate>
                    <Grid
                        RowDefinitions="68" HeightRequest="68">
                        <Image Source="{Binding FlyoutIcon}"
                               VerticalOptions="Center"
                               HorizontalOptions="Center"
                               />
                    </Grid>
                </DataTemplate>

            </Shell.ItemTemplate>
            -->
            
        </Shell>
    </Application.MainPage>
</Application>
